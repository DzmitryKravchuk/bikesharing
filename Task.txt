Main flow
Человек пришел в прокат.
1.создаю запись на аренду. Ищу человека в справочнике по номеру телефона с частичным совпадением, обычно по 4 последним цифрам номера.
2.Если человека нет, то сразу добавляю. Возможно не полностью, а только номер.
3.Добавлю на него прокатное оборудование по порядковому номеру. Так проще чем читать метку каждого велосипеда.
4.Установил дату начала проката и внес оплаченную сумму. Указываю расчетное время катания. Например 1 час, 2 часа, сутки.
5.При возвращении считываю телефоном метки и оборудование помечается как возвращено, рассчитывается стоимость с кратностью 5 минут. Если просрочил до 7 минут, то прощается. Если больше 7 минут, то считаем 10 минут и доплату.
6.Бывает велосипед не понравился и его вернули, либо поменяли. Если 10 минут не прошло, то деньги возвращаются.

Требования:
- Раздел админки:
1. Создать необходимые эндпоинты для возможности заполнения БД.
	Сущности-справочники, будут изменяться очень редко. Одинаковые поля для всех таблиц: name(not empty), code(unique, not null), id(PK):
	- Тип прокатного оборудования(велосипед, электросамокат и т.д.)
	- статус прокатного оборудования (в ремонте, сломан, зарезервирован клиентом, на линии, ожидание/свободен)
 	- тип обслуживания (плановое ТО, сломано клиентом и т.д.)
	Сущности:
	- Прокатная единица(велосипед АИСТ, скутер Xiaomi): регистрационный номер(строка), тип прокатного оборудования(FK), заводской номер(строка), дата покупки(дата), примечание(строка)
	- кредитный тариф: количество, стоимость (децимал/мани), дата начала тарифа(нот нулл), дата окончания
- Клиентская часть:
	Сущности:
    - техническое обслуживание: дата обслуживание(дата), описание поломки(строка), тип обслуживания(FK),  произведенные работы(строка), дата окончания обслуживания(дата)
	- клиент: имя, номер телефона, адрес, дата регистрации, рейтинг, примечание
 	- прокат оборудования: прокатная единица(FK), клиент(FK), дата начала проката(дата, нот нулл), дата возврата(дата), итоговая стоимость(лонг), оставленный залог(лонг), примечание(строка)

 Техническая часть:
 1.Java 11 or latest Java LTS, Spring Boot latest, mapstruct, check style, gradle, liquibase, lombok
 2.DB PostgreSQL
 3.Docker для разработки, docker compose - пока будет только один сервис с БД
 4.Декларативная(через аннотации) валидация полей реквестов
 5.Все эксепшены должны наследоваться от одного BusinessException( который extends RuntimeException)
 6.Один общий класс GeneralError для ошибок, от которого должен наследоваться ValidationError и другие возможно классы тоже. Каждая ошибка должны содержать код бизнес ошибки(представление в виде строки заглавными буквами). Разделить коды ошибок по группам
 7.Контроллеры покрыть  MVC тестами.
 8.Сервисы покрыть интеграционными тестами с БД(тестконтейнер или ин мемори БД)
 9.Разделить приложение на слои: контроллер/сервис/персистенс/конфиг
 10.Контроллеры должны принимать только классы c Request суффиксом, возвращать с Response суффиксом. Необходимо их разделить по пакетам
 11.Контроллер не должен содержать никакой логики, только вызовы сервисов.
 12.Сервисы должны общаться между собой через модели.
 13.Использовать транзакции, где необходимо.
 14.Проект должен быть multiproject. Структура такая
 main
 |-backend
 |-client